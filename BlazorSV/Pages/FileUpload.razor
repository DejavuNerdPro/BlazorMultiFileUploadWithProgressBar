@page "/FileUpload"
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Linq
@using System.Threading
@using Microsoft.AspNetCore.Hosting;
@implements IDisposable

<h1 class="bg-info">Upload Multiple Image files</h1>

<EditForm EditContext="editContext" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        Name: <InputText @bind-Value="@person.Name" class="form-control" />
        <ValidationMessage For="() => person.Name" />
    </div>

    <div class="form-group">
        Picture: <InputFile multiple OnChange="OnChange" class="form-control" />
        <ValidationMessage For="() => person.Picture" />

        @{
            var progressCss = "progress " + (displayProgress ? "" : "d-none");
            var progressWidthStyle = progressPercent + "%";
        }

        <div class="@progressCss">
            <div class="progress-bar" role="progressbar" style="width:@progressWidthStyle" area-valuenow="@progressPercent" aria-minvalue="0" aria-maxvalue="100"></div>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</EditForm>

@if (imageDataUrls.Count > 0)
{
    <h4>Images</h4>

    <div class="card" style="width:30rem;">
        <div class="card-body">
            @foreach (var imageDataUrl in imageDataUrls)
            {
                <p><img class="rounded m-1" src="@imageDataUrl" /></p>
            }
        </div>
    </div>
}

@code
{
    private CancellationTokenSource cancelation;
    private bool displayProgress;
    private EditContext editContext;
    private Person person;
    private int progressPercent;

    protected override void OnInitialized()
    {
        cancelation = new CancellationTokenSource();
        person = new Person();
        editContext = new EditContext(person);
    }

    [Inject]
    private IWebHostEnvironment env { get; set; }

    private IList<string> imageDataUrls = new List<string>();
    private int Total;
    private async Task OnChange(InputFileChangeEventArgs e)
    {
        person.Picture = e.GetMultipleFiles().ToArray();

        var format = "image/png";
        Total = e.GetMultipleFiles().Count();
        foreach (var imageFile in e.GetMultipleFiles())
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
        }
        editContext.NotifyFieldChanged(FieldIdentifier.Create(() => person.Picture));
    }

    private async Task OnSubmit()
    {
        for (int i = 0; i < Total; i++)
        {
            var path = $"{env.WebRootPath}\\{person.Picture[i].Name}";
            using var file = File.OpenWrite(path);
            using var stream = person.Picture[i].OpenReadStream(968435456);

            var buffer = new byte[4 * 1096];
            int bytesRead;
            double totalRead = 0;

            displayProgress = true;

            while ((bytesRead = await stream.ReadAsync(buffer, cancelation.Token)) != 0)
            {
                totalRead += bytesRead;
                await file.WriteAsync(buffer, cancelation.Token);

                progressPercent = (int)((totalRead / person.Picture[i].Size) * 100);
                StateHasChanged();
            }

            displayProgress = false;
        }
    }

    public void Dispose()
    {
        cancelation.Cancel();
    }

    public class Person
    {
        [Required]
        [StringLength(20, MinimumLength = 2)]
        public string Name { get; set; }

        [Required]
        [FileValidation(new[] { ".png", ".jpg" })]
        public IBrowserFile[] Picture { get; set; }
    }

    private class FileValidationAttribute : ValidationAttribute
    {
        public FileValidationAttribute(string[] allowedExtensions)
        {
            AllowedExtensions = allowedExtensions;
        }

        private string[] AllowedExtensions { get; }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            foreach (IBrowserFile file in (IBrowserFile[])value)
            {
                var extension = System.IO.Path.GetExtension(file.Name);

                if (!AllowedExtensions.Contains(extension, StringComparer.OrdinalIgnoreCase))
                {
                    return new ValidationResult($"File must have one of the following extensions: {string.Join(", ", AllowedExtensions)}.", new[] { validationContext.MemberName });
                }
            }
            return ValidationResult.Success;
        }
    }
}